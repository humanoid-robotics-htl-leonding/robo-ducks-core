#!/bin/bash

# Get base directory for better referencing
BASEDIR=`cd $(dirname $0); pwd -P`
BASEDIR=${BASEDIR%/*}

source "${BASEDIR}/scripts/lib/msg.sh"
source "${BASEDIR}/scripts/lib/time.sh"
source "${BASEDIR}/scripts/lib/compile.sh"
source "${BASEDIR}/scripts/lib/upload.sh"
source "${BASEDIR}/scripts/lib/naonet.sh"
source "${BASEDIR}/scripts/lib/numberToIP.sh"
source "${BASEDIR}/scripts/lib/docker.sh"
source "${BASEDIR}/scripts/lib/logs.sh"

function helpMenu {
  echo "Usage: $0 [OPTIONS] NAO"
  echo ""
  echo "Options"
  echo " -d, --delete                      delete extraneous files from target NAO (implies --config)"
  echo " -c, --config                      upload config"
  echo " -b, --build-type BUILD_TYPE       use the specified build type (one out of Debug, Develop, Release)"
  echo " -n, --no-compile                  do not compile before uploading"
  echo " -r, --restart                     restart the hulk service after uploading"
  echo " -R, --restart-naoqi               restart naoqi after uploading (implies --restart)"
  echo " -j, --jobs                        the amount of processes used for compilation"
  echo " -l, --logdir LOGDIR               the directory to which the logs from the NAO are downloaded"
  echo " -h, --help                        show this help"
  echo " -e, --execute                     execute ~/naoqi/bin/tuhhNao after uploading"
  echo ""
  echo "Nao"
  echo " either hostname, IP or number of the NAO"
}

function run {
  # It only makes sense to upload something compiled for the NAO.
  TARGET="nao"
  # do not upload configuration by default
  UPLOAD_CONFIG=false
  # delete everything in /home/nao/naoqi before uploading
  DELETE_FILES=false
  # compile before uploading by default
  COMPILE=true
  # do not restart by default
  RESTART=false
  # do not restart naoqi by default
  RESTART_NAOQI=false
  # set default job number to cores + 1
  JOBS=$(njobs)
  # do not execute binary by default
  EXECUTE=false
  # read the build type from a file
  if [ -f "${BASEDIR}/.current.bt" ]; then
    BUILD_TYPE=`cat "${BASEDIR}/.current.bt"`
  else
    BUILD_TYPE=""
  fi
  # prepare parameters
  PARAMETERS=""
  while [ "$#" -gt 0 ]; do
    if [[ $1 =~ ^- ]] && [[ ! $1 =~ ^-- ]]; then
      PARAMETERS+=$(echo "${1:1}" | sed -e "s/\(.\)/ -\1/g")
    else
      PARAMETERS+=" $1"
    fi
    shift
  done
  eval set -- "${PARAMETERS}";

  while [ "$#" -gt 1 ]; do
    case "$1" in
      "-l" | "--logdir")
        shift
        if [ "$#" -eq 0 ]; then
          msg -e "--logdir needs a directory as parameter!"
          helpMenu
          return 1
        fi
        # If you really need to use the --logdir option, you can comment the following 4 lines.
        # You have to use a name that is valid inside the container, though, such as
        # --logdir /nao/logs/Game3
        if iAmInDocker; then
          msg -e "Sorry, but the --logdir option is not yet available in docker!"
          return 1
        fi
        LOGDIR="$1"
        ;;
      "-d" | "--delete")
        UPLOAD_CONFIG=true
        DELETE_FILES=true
        ;;
      "-c" | "--config")
        UPLOAD_CONFIG=true
        ;;
      "-b" | "--build-type")
        shift
        BUILD_TYPE="$1"
        if [[ $1 =~ ^- ]]; then
          msg -e "--build-type needs a build type as parameter! \"$1\" does not look like that."
          helpMenu
          return 1
        fi
        ;;
      "-n" | "--no-compile")
        COMPILE=false
        ;;
      "-r" | "--restart")
        RESTART=true
        ;;
      "-R" | "--restart-naoqi")
        RESTART_NAOQI=true
        RESTART=true
        ;;
      "-j" | "--jobs")
        shift
        if [ "$#" -eq 0 ]; then
          msg -e "--jobs needs a job number!"
          helpMenu
          return 1
        fi
        JOBS=$1
        ;;
      "-h" | "--help")
        helpMenu
        return 0
        ;;
      "-e" | "--execute")
        EXECUTE=true
        ;;
      "-t" | "--target")
        shift
        TARGET="$1"
        ;;
      *)
        msg -e "Failed to parse \"$1\"!"
        helpMenu
        return 1
        ;;
    esac
    shift
  done

  if [ "$#" -ne 1 ]; then
    helpMenu
    return 1
  elif [[ $1 =~ ^- ]]; then
    msg -e "The last parameter has to be the hostname of a NAO! \"$1\" does not look like that."
    helpMenu
    return 1
  fi

  # last parameter has to be the hostname of the NAO
  NAO=$(numberToIP "$1")

  if [ "${BUILD_TYPE}" == "" ]; then
    msg -e "It seems you haven't compiled before! You need to specify a build type to this script."
    return 1
  fi

  # compile the code if requested
  if ${COMPILE}; then
    msg -n "Compiling with build type ${BUILD_TYPE}."
    set_start_time
    compile "${BASEDIR}" "${TARGET}" "${BUILD_TYPE}" false ${JOBS}
    if [ "$?" -ne 0 ]; then
      msg -e "Compilation failed!"
      return 1
    fi
    get_time_diff
    msg -s "Compilation finished successfully in ${DIFF}!"
  fi

  # download logs
  if [ ! "${LOGDIR}" == "" ]; then
    download_logs "$BASEDIR" "$NAO" "$LOGDIR"
  fi

  msg -n "Stopping ${NAO}. (Not stopping Hulks service)"
#  naocmd "${BASEDIR}" "${NAO}" "sudo /etc/init.d/hulk stop; killall -SIGTERM tuhhNao 2>/dev/null; exit 0"
  naocmd "${BASEDIR}" "${NAO}" "killall -SIGTERM tuhhNao 2>/dev/null; exit 0"
  if [ "$?" -ne 0 ]; then
    msg -e "Failed to stop ${NAO}!"
    return 1
  fi

  if ${RESTART_NAOQI}; then
    msg -n "Stopping naoqi on ${NAO}."
    naocmd "${BASEDIR}" "${NAO}" "sudo /etc/init.d/naoqi stop"
    if [ "$?" -ne 0 ]; then
      msg -e "Failed to stop naoqi on ${NAO}!"
      return 1
    fi
  fi

  # real upload
  msg -n "Uploading configuration ${BUILD_TYPE} to ${NAO}."
  set_start_time
  upload "${BASEDIR}" "${NAO}" "${BUILD_TYPE}" ${UPLOAD_CONFIG} ${DELETE_FILES}
  if [ "$?" -ne 0 ]; then
    msg -e "Upload to ${NAO} failed!"
    return 1
  fi
  get_time_diff
  msg -s "Upload to ${NAO} finished successfully in ${DIFF}!"

  if ${RESTART}; then
    msg -n "Restarting the hulk service on ${NAO}."
    naocmd "${BASEDIR}" "${NAO}" "sudo /etc/init.d/hulk start"
    if [ "$?" -ne 0 ]; then
      msg -e "Failed to restart the hulk service on ${NAO}!"
      return 1
    fi
    msg -s "Successfully restarted the hulk service on ${NAO}!"
  fi

  if ${EXECUTE}; then
    msg -n "Executing tuhhNao on ${NAO}."
    naocmd "${BASEDIR}" "${NAO}" "/home/nao/naoqi/bin/tuhhNao"
  fi

  return 0
}

handleDocker "${BASEDIR}" "$@"
